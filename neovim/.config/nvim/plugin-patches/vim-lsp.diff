diff --git a/autoload/lsp/internal/diagnostics/document_diagnostics_command.vim b/autoload/lsp/internal/diagnostics/document_diagnostics_command.vim
index cc43b94..72f321f 100644
--- a/autoload/lsp/internal/diagnostics/document_diagnostics_command.vim
+++ b/autoload/lsp/internal/diagnostics/document_diagnostics_command.vim
@@ -33,8 +33,7 @@ function! lsp#internal#diagnostics#document_diagnostics_command#do(options) abor
         call lsp#utils#error('No diagnostics results')
         return
     else
-        call setloclist(0, l:result)
         echo 'Retrieved diagnostics results'
-        botright lopen
+        call ShowQuickfix(l:result)
     endif
 endfunction
diff --git a/autoload/lsp/ui/vim.vim b/autoload/lsp/ui/vim.vim
index 53309e5..18c2709 100644
--- a/autoload/lsp/ui/vim.vim
+++ b/autoload/lsp/ui/vim.vim
@@ -270,13 +270,11 @@ function! s:handle_symbol(server, last_command_id, type, data) abort
 
     let l:list = lsp#ui#vim#utils#symbols_to_loc_list(a:server, a:data)
 
-    call lsp#ui#vim#utils#setqflist(l:list, a:type)
-
     if empty(l:list)
         call lsp#utils#error('No ' . a:type .' found')
     else
         echo 'Retrieved ' . a:type
-        botright copen
+        call ShowQuickfix(l:list)
     endif
 endfunction
 
@@ -313,9 +311,8 @@ function! s:handle_location(ctx, server, type, data) abort "ctx = {counter, list
                     let l:level = count(l:parent[l:pos-1].text, g:lsp_tree_incoming_prefix)
                     let a:ctx['list'] = extend(l:parent, map(a:ctx['list'], 'extend(v:val, {"text": repeat("' . g:lsp_tree_incoming_prefix . '", l:level+1) . v:val.text})'), l:pos)
                 endif
-                call lsp#ui#vim#utils#setqflist(a:ctx['list'], a:type)
                 echo 'Retrieved ' . a:type
-                botright copen
+                call ShowQuickfix(a:ctx['list'])
                 if get(a:ctx, 'add_tree', v:false)
                     " move the cursor to the newly added item
                     execute l:pos + 1
@@ -533,9 +530,8 @@ function! s:handle_call_hierarchy(ctx, server, type, data) abort
                 let l:level = count(l:parent[l:pos-1].text, g:lsp_tree_incoming_prefix)
                 let a:ctx['list'] = extend(l:parent, map(a:ctx['list'], 'extend(v:val, {"text": repeat("' . g:lsp_tree_incoming_prefix . '", l:level+1) . v:val.text})'), l:pos)
             endif
-            call lsp#ui#vim#utils#setqflist(a:ctx['list'], a:type)
             echo 'Retrieved ' . a:type
-            botright copen
+            call ShowQuickfix(a:ctx['list'])
             if get(a:ctx, 'add_tree', v:false)
                 " move the cursor to the newly added item
                 execute l:pos + 1
diff --git a/autoload/lsp/ui/vim/output.vim b/autoload/lsp/ui/vim/output.vim
index 9955f3b..6f6079d 100644
--- a/autoload/lsp/ui/vim/output.vim
+++ b/autoload/lsp/ui/vim/output.vim
@@ -102,7 +102,7 @@ function! s:get_float_positioning(height, width) abort
     let l:height = min([l:height, max([&lines - &cmdheight - l:row, &previewheight])])
 
     let l:style = 'minimal'
-    let l:border = 'double'
+    let l:border = 'solid'
     " Positioning is not window but screen relative
     let l:opts = {
         \ 'relative': 'editor',
@@ -146,7 +146,8 @@ function! lsp#ui#vim#output#floatingpreview(data) abort
     elseif s:use_vim_popup
         let l:options = {
             \ 'moved': 'any',
-            \ 'border': [1, 1, 1, 1],
+            \ 'padding': [1, 1, 1, 1],
+            \ 'border': [0, 0, 0, 0],
             \ 'callback': function('s:vim_popup_closed')
             \ }
 
diff --git a/autoload/lsp/utils/workspace_edit.vim b/autoload/lsp/utils/workspace_edit.vim
index 5dafd26..697a2a1 100644
--- a/autoload/lsp/utils/workspace_edit.vim
+++ b/autoload/lsp/utils/workspace_edit.vim
@@ -13,8 +13,7 @@ function! lsp#utils#workspace_edit#apply_workspace_edit(workspace_edit) abort
     endif
 
     if g:lsp_show_workspace_edits
-        call setloclist(0, l:loclist_items, 'r')
-        execute 'lopen'
+        call ShowQuickfix(l:loclist_items)
     endif
 endfunction
 
diff --git a/autoload/vital/_lsp/VS/Vim/Window/FloatingWindow.vim b/autoload/vital/_lsp/VS/Vim/Window/FloatingWindow.vim
index fa1f888..2e437e4 100644
--- a/autoload/vital/_lsp/VS/Vim/Window/FloatingWindow.vim
+++ b/autoload/vital/_lsp/VS/Vim/Window/FloatingWindow.vim
@@ -384,7 +384,7 @@ if has('nvim')
     \   'height': l:style.height,
     \   'focusable': v:true,
     \   'style': 'minimal',
-    \   'border': has_key(l:style, 'border') ? l:style.border : 'none',
+    \   'border': 'solid',
     \ }
     if !exists('*win_execute') " We can't detect neovim features via patch version so we try it by function existence.
       unlet l:style.border
@@ -408,9 +408,8 @@ else
     \   'minheight': l:style.height,
     \   'tabpage': 0,
     \   'firstline': l:style.topline,
-    \   'padding': [0, 0, 0, 0],
-    \   'border': has_key(l:style, 'border') ? [1, 1, 1, 1] : [0, 0, 0, 0],
-    \   'borderchars': get(l:style, 'border', []),
+    \   'padding': [1, 1, 1, 1],
+    \   'border': [0, 0, 0, 0],
     \   'fixed': v:true,
     \ }
   endfunction
